(load "src/unificacion.lisp")

(defvar contador)
(setf contador 0)

(defvar exito)
(setf exito 0)

(defun aplicar_test (s1 p1 esp)
  (incf contador)
  (write-string "S1: ") (write s1) (write-line "")
  (write-string "P1: ") (write p1) (write-line "")
  (let ((res (aplicar s1 p1)))
    (write-string "RESULTADO: ") (write res) (write-line "")
    (write-string "ESPERADO : ") (write esp) (write-line "")
    (cond ((equal res esp) (write-string "RESULTADO CORRECTO") (incf exito))
          (t (write-string "RESULTADO INCORRECTO"))))
  (write-line "") (write-line ""))

(defun componer_test (s1 s2 esp)
  (incf contador)
  (write-string "S1: ") (write s1) (write-line "")
  (write-string "S2: ") (write s2) (write-line "")
  (let ((res (componer s1 s2)))
    (write-string "RESULTADO: ") (write res) (write-line "")
    (write-string "ESPERADO : ") (write esp) (write-line "")
    (cond ((equal res esp) (write-string "RESULTADO CORRECTO") (incf exito))
          (t (write-string "RESULTADO INCORRECTO"))))
  (write-line "") (write-line ""))

(defun unificar_test (e1 e2 esp)
  (incf contador)
  (write-string "E1: ") (write e1) (write-line "")
  (write-string "E2: ") (write e2) (write-line "")
  (let ((res (unificar e1 e2)))
    (write-string "RESULTADO: ") (write res) (write-line "")
    (write-string "ESPERADO : ") (write esp) (write-line "")
    (cond ((equal res esp) (write-string "RESULTADO CORRECTO") (incf exito))
          (t (write-string "RESULTADO INCORRECTO"))))
  (write-line "") (write-line ""))

; S1   = ((A (? X)) (Y (? Z)) ((F (? H)) (? K)))
; P1   = (F (? X) (G (? K)) (F2 (? Z)))
; P1S1 = (F A (G (F (? H))) (F2 Y))
(write-line "TEST APLICAR")
(aplicar_test '((A (? X)) (Y (? Z)) ((F (? H)) (? K))) '(F (? X) (G (? K)) (F2 (? Z))) '(F A (G (F (? H))) (F2 Y)))
(write-line "")

; S1   = ((A (? Y)) (A (? X)) ((G (? Y)) (? Z)))
; S2   = ((A (? X)) (B (? Y)))
; S1S2 = ((A (? Y)) (A (? X)) ((G B) (? Z)))
(write-line "TEST COMPONER")
(componer_test '((A (? Y)) (A (? X)) ((G (? Y)) (? Z))) '((A (? X)) (B (? Y))) '((A (? Y)) (A (? X)) ((G B) (? Z))))
(componer_test '(((? X) (? Y))) '((A (? X))) '((A (? Y)) (A (? X))))
(write-line "")

; E1   = (P (? X) (F (? X)))
; E2   = (P A (? Y))
; RESULTADO = ((A (? X)) ((F A) (? Y)))
(write-line "TEST UNIFICAR")
(unificar_test '(P (? X) (F (? X))) '(P A (? Y)) '((A (? X)) ((F A) (? Y))))
(unificar_test '(P (? X) (F (? X))) '(P A B) 'FALLO)
(unificar_test 'F 'F 'NIL)
(unificar_test '(F (? X)) '(F A) '((A (? X))))
(unificar_test '(F (? X) (? Y)) '(F A B) '((A (? X)) (B (? Y))))
(unificar_test '(F (? X) (G (? X))) '(F A (G A)) '((A (? X))))
(unificar_test '(F (? Y) (? X)) '(F (? X) A) '((A (? Y)) (A (? X))))
(unificar_test '(F (? Y) A) '(F (? X) (? X)) '((A (? Y)) (A (? X))))
(write-line "")

(write exito) (write-string "/") (write contador)
(write-line " TESTS EJECUTADOS CORRECTAMENTE")